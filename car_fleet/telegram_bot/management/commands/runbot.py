from datetime import datetime
from json import load

from django.core.management.base import BaseCommand
from django.contrib.auth import authenticate, login
from django.db.models import Sum
from telebot import types
import telebot

from enterprise.models import Enterprise
from route.models import Route
from vehicle.models import Vehicle

with open("settings.json", "r") as settings_file:
    LOCAL_SETTINGS = load(settings_file)

try:
    token = LOCAL_SETTINGS['telegram_token']
except:
    raise Exception("Telegram bot token hasn't been provided!")

user_credentials = {}
bot = telebot.TeleBot(token)


@bot.message_handler(commands=['debug'])
def show_debug(message):
    info = [
        str(user_credentials),
        message.chat.id
    ]
    bot.send_message(message.chat.id, str(info))


@bot.message_handler(commands=['start'])
def menu(message):
    print(user_credentials)
    if user_credentials.get(message.chat.id):
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã.')
        bot.register_next_step_handler(message, manager_menu)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    login_button = types.KeyboardButton("–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
    markup.add(login_button)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é. –í–æ–π–¥–µ—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É?', reply_markup=markup)


def manager_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–µ–≥ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∞—à–∏–Ω–µ")
    button2 = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–µ–≥ –º–∞—à–∏–Ω –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è")
    markup.add(button1, button2)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –∂–∞–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.', reply_markup=markup)


def get_car_mileage(message):
    if user_credentials.get(message.chat.id) is None:
        bot.send_message(message.chat.id, '–í—ã –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã.')
        menu(message)
        return

    format = "%d-%m-%Y"

    try:
        info = message.text.split()
        vehicle_id = int(info[0])

        try:
            vehicle = Vehicle.objects.get(id=vehicle_id)
        except:
            bot.send_message(message.chat.id, '–ê–≤—Ç–æ–º–æ–±–∏–ª—è —Å —Ç–∞–∫–∏–º ID –Ω–µ—Ç.')
            manager_menu(message)
            return

        if not vehicle.enterprise.manager.filter(id=user_credentials[message.chat.id].id).exists():
            bot.send_message(message.chat.id, '–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏, –≤–ª–∞–¥–µ—é—â–µ–π —ç—Ç–∏–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º.')
            manager_menu(message)
            return

        start_date = datetime.strptime(info[1], format)
        end_date = datetime.strptime(info[2], format)

        routes = Route.objects.filter(vehicle__id=vehicle_id)\
                              .filter(start__gte=start_date)\
                              .filter(end__lte=end_date)

        distance = routes.aggregate(Sum('distance'))['distance__sum'] or 0

        bot.send_message(message.chat.id, str(distance))
        manager_menu(message)
        return
    except:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        markup.add(button)
        bot.send_message(message.chat.id, '–í—ã –Ω–µ —Å–æ–±–ª—é–ª–∏ —Ñ–æ—Ä–º–∞—Ç.',
                         reply_markup=markup)
        return


def get_company_mileage(message):
    if user_credentials.get(message.chat.id) is None:
        bot.send_message(message.chat.id, '–í—ã –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã.')
        menu(message)
        return

    format = "%d-%m-%Y"

    try:
        info = message.text.split()
        company_id = int(info[0])

        try:
            company = Enterprise.objects.get(id=company_id)
        except:
            bot.send_message(message.chat.id, '–ö–æ–º–ø–∞–Ω–∏–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ—Ç.')
            manager_menu(message)
            return

        if not company.manager.filter(id=user_credentials[message.chat.id].id).exists():
            bot.send_message(message.chat.id, '–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.')
            manager_menu(message)
            return

        start_date = datetime.strptime(info[1], format)
        end_date = datetime.strptime(info[2], format)

        routes = Route.objects.filter(vehicle__enterprise=company) \
            .filter(start__gte=start_date) \
            .filter(end__lte=end_date)

        distance = routes.aggregate(Sum('distance'))['distance__sum'] or 0

        bot.send_message(message.chat.id, str(distance))
        manager_menu(message)
        return
    except:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        markup.add(button)
        bot.send_message(message.chat.id, '–í—ã –Ω–µ —Å–æ–±–ª—é–ª–∏ —Ñ–æ—Ä–º–∞—Ç.',
                         reply_markup=markup)
        return


@bot.message_handler(content_types=['text'])
def message_reply(message):
    if message.text == "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É":
        bot.register_next_step_handler(message, handle_credentials)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è")
        markup.add(button)

        bot.send_message(message.chat.id,
                         "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'username password'",
                         reply_markup=markup)
        return

    if message.text == "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–µ–≥ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∞—à–∏–Ω–µ":
        bot.send_message(message.chat.id,
                         "–£–∫–∞–∂–∏—Ç–µ ID –º–∞—à–∏–Ω—ã –∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"ID DD-MM-YYYY DD-MM-YYYY\"")
        bot.register_next_step_handler(message, get_car_mileage)
        return

    if message.text == "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–µ–≥ –º–∞—à–∏–Ω –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è":
        bot.send_message(message.chat.id,
                         "–£–∫–∞–∂–∏—Ç–µ ID –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"ID DD-MM-YYYY DD-MM-YYYY\"")
        bot.register_next_step_handler(message, get_company_mileage)
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞":
        bot.register_next_step_handler(message, manager_menu)
        return


def handle_credentials(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
        menu(message)
        return

    nick_pass = message.text

    try:
        nick_pass = nick_pass.split()
        assert len(nick_pass) == 2
        nickname = nick_pass[0]
        password = nick_pass[1]
    except:
        bot.send_message(message.chat.id, '–í–µ—Ä–æ—è—Ç–Ω–æ, –≤—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.' +
                         ' –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        bot.register_next_step_handler(message, handle_credentials)
        return

    if nickname == '–ö–æ—Ç–∏—á–∫–∞' and password == "123":
        bot.send_message(message.chat.id, "–ö–æ—Ç–∏—á–∫–∞ –º–∏–ª–∞—è, —Ç–µ–±–µ –ø–æ—Ü–µ–ª—É–π  üòò")
        bot.send_message(message.chat.id, "–ù–æ –≤—Å–µ –∂–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–Ω—ã." +
                         " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ.")
        bot.register_next_step_handler(message, handle_credentials)
        return

    user = authenticate(username=nickname, password=password)

    if not user:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, handle_credentials)
        return

    user_credentials[message.chat.id] = user

    manager_menu(message)


class Command(BaseCommand):
    help = "Starts telegram bot"

    def handle(self, *args, **options):
        bot.infinity_polling()
